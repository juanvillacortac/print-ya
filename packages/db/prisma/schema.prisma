// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
  binaryTargets   = ["debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String    @id @unique @default(cuid())
  email         String    @unique
  password      String?
  stores        Store[]   @relation(name: "users_store")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  storesUpdated Store[]   @relation("store_updatedBy")
  accounts      Account[]
}

model Customer {
  id          String @id @unique @default(cuid())
  email       String
  firstName   String
  lastName    String
  phoneNumber String @default("")
  currency    String @default("usd")

  addresses CustomerAddress[]
  orders    Order[]
  accounts  Account[]
  store     Store?            @relation(fields: [storeId], references: [id])
  storeId   String?

  createdAt     DateTime        @default(now())
  SearchHistory SearchHistory[]
}

enum CustomerAddressType {
  billing
  shipping
}

model CustomerAddress {
  id      String               @id @unique @default(cuid())
  name    String
  onlyFor CustomerAddressType?
  data    Json

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model Account {
  id       String @id @unique @default(cuid())
  provider String
  authMeta Json

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Store {
  id              String   @id @default(cuid())
  user            User     @relation("users_store", fields: [userId], references: [id])
  userId          String
  name            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  updatedBy       User?    @relation("store_updatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?

  slug         String  @unique
  customDomain String? @unique

  logo            String?
  favicon         String?
  categories      StoreCategory[]
  products        Product[]
  paymentGateways PaymentGateway[]
  orders          Order[]
  customers       Customer[]

  contactData   Json?
  ProductTag    ProductTag[]
  SearchHistory SearchHistory[]
  // ShopifyImport ShopifyImport[]
  ShopifyImport ShopifyImport[]
}

model PaymentGateway {
  id       String  @id @default(cuid())
  provider String
  meta     Json?
  active   Boolean @default(true)
  store    Store?  @relation(fields: [storeId], references: [id])
  storeId  String?
}

model StoreCategory {
  id            String          @id @default(cuid())
  slug          String
  store         Store           @relation(fields: [storeId], references: [id])
  storeId       String
  name          String
  products      Product[]
  SearchHistory SearchHistory[]

  @@unique([slug, storeId])
}

enum ProductType {
  template
  template_pro
  generic
}

model ProductTag {
  id    String @id @default(cuid())
  store Store  @relation(fields: [storeId], references: [id])
  name  String

  products TagsOnProducts[]
  storeId  String

  @@unique([name, storeId])
}

enum ShopifyImportStatus {
  pending
  in_review
  imported
}

model ShopifyImport {
  id      String @id @default(cuid())
  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  status    ShopifyImportStatus @default(pending)
  createdAt DateTime            @default(now())

  products Product[]
}

model Product {
  id   String @id @default(cuid())
  name String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  type ProductType @default(template)

  public     Boolean
  archived   Boolean   @default(false)
  archivedAt DateTime?

  description String?

  minQuantity Int?
  modifiers   ProductModifier[]

  price Float

  meta Json?

  images        ProductImage[]
  template      Json?
  templateDraft Json?

  storeCategory   StoreCategory? @relation(fields: [storeCategoryId], references: [id], onDelete: Cascade)
  storeCategoryId String?

  orderItems OrderItem[]

  tags TagsOnProducts[]

  shopifyImport   ShopifyImport? @relation(fields: [shopifyImportId], references: [id])
  shopifyImportId String?

  @@unique([slug, storeId])
}

model TagsOnProducts {
  product      Product    @relation(fields: [productId], references: [id])
  tag          ProductTag @relation(fields: [productTagId], references: [id])
  productId    String
  productTagId String

  @@id([productId, productTagId])
}

model ProductImage {
  id  String  @id @default(cuid())
  url String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductModifier {
  id               String                @id @default(cuid())
  name             String
  type             String                @default("select")
  active           Boolean               @default(true)
  product          Product?              @relation(fields: [productId], references: [id])
  defaultValue     String?
  templateAccessor String?
  productId        String?
  items            ProductModifierItem[]
  ordinal          Int                   @default(0)
}

model ProductModifierItem {
  id         String  @id @default(cuid())
  name       String
  cost       Float   @default(0)
  percentage Boolean @default(false)
  active     Boolean @default(true)

  meta    Json?
  ordinal Int   @default(0)

  productModifier   ProductModifier? @relation(fields: [productModifierId], references: [id])
  productModifierId String?
}

enum OrderStatus {
  paid
  processing
  pending
}

enum FulfillmentStatus {
  fulfilled
  unfulfilled
  partially_fulfilled
  awaiting_shipment
  scheduled
  on_hold
}

model Order {
  id    String      @id @default(cuid())
  items OrderItem[]
  fees  OrderFee[]

  token String?

  status            OrderStatus       @default(pending)
  fulfillmentStatus FulfillmentStatus @default(unfulfilled)
  total             Float             @default(0)

  billingData  Json?
  shippingData Json?

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  paymentMethods Json?

  createdAt DateTime @default(now())

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model OrderItem {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  modifiers Json
  cost      Float   @default(0)
  basePrice Float   @default(0)
  fulfilled Int     @default(0)
  quantity  Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  productId String
}

model OrderFee {
  id String @id @default(cuid())

  name String

  fixed      Float @default(0)
  percentage Float @default(0)

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model SearchHistory {
  id String @id @default(cuid())

  searchTerm String
  category   StoreCategory? @relation(fields: [storeCategoryId], references: [id])
  customer   Customer?      @relation(fields: [customerId], references: [id])
  ip         String

  store           Store   @relation(fields: [storeId], references: [id])
  storeCategoryId String?
  customerId      String?
  storeId         String

  createdAt DateTime @default(now())
}
