// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("VITE_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            String    @id @unique @default(cuid())
  email         String    @unique
  password      String?
  stores        Store[]   @relation(name: "users_store")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  storesUpdated Store[]   @relation("store_updatedBy")
  accounts      Account[]
}

model Customer {
  id        String    @id @unique @default(cuid())
  currency  String    @default("usd")
  lingData  Json?
  email     String
  firstName String
  lastName  String
  orders    Order[]
  accounts  Account[]
}

model Account {
  id       String @id @unique @default(cuid())
  provider String
  authMeta Json

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Store {
  id              String   @id @default(cuid())
  user            User     @relation("users_store", fields: [userId], references: [id])
  userId          String
  name            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  updatedBy       User?    @relation("store_updatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?

  slug         String  @unique
  customDomain String? @unique

  logo            String?
  favicon         String?
  categories      StoreCategory[]
  products        Product[]
  paymentGateways PaymentGateway[]
  orders          Order[]
}

model PaymentGateway {
  id       String  @id @default(cuid())
  provider String
  meta     Json?
  active   Boolean @default(true)
  store    Store?  @relation(fields: [storeId], references: [id])
  storeId  String?
}

model StoreCategory {
  id       String    @id @default(cuid())
  slug     String
  store    Store     @relation(fields: [storeId], references: [id])
  storeId  String
  name     String
  products Product[]
}

enum ProductType {
  template
  generic
}

model Product {
  id   String @id @default(cuid())
  name String
  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  type ProductType @default(template)

  public Boolean

  description String?

  minQuantity Int?
  modifiers   ProductModifier[]

  price Float

  meta Json?

  images        ProductImage[]
  template      Json?
  templateDraft Json?

  storeCategory   StoreCategory? @relation(fields: [storeCategoryId], references: [id], onDelete: Cascade)
  storeCategoryId String?

  orderItems OrderItem[]
}

model ProductImage {
  id  String  @id @default(cuid())
  url String?

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductModifier {
  id               String                @id @default(cuid())
  name             String
  type             String                @default("select")
  active           Boolean               @default(true)
  product          Product?              @relation(fields: [productId], references: [id])
  defaultValue     String?
  templateAccessor String?
  productId        String?
  items            ProductModifierItem[]
  ordinal          Int                   @default(0)
}

model ProductModifierItem {
  id         String  @id @default(cuid())
  name       String
  cost       Float   @default(0)
  percentage Boolean @default(false)
  active     Boolean @default(true)

  meta    Json?
  ordinal Int   @default(0)

  productModifier   ProductModifier? @relation(fields: [productModifierId], references: [id])
  productModifierId String?
}

enum OrderStatus {
  paid
  processing
  pending
}

enum FulfillmentStatus {
  fulfilled
  unfulfilled
  partially_fullfilled
  awaiting_shipment
  scheduled
  on_hold
}

model Order {
  id    String      @id @default(cuid())
  items OrderItem[]
  fees  OrderFee[]

  status            OrderStatus       @default(pending)
  fulfillmentStatus FulfillmentStatus @default(unfulfilled)
  total             Float             @default(0)

  billingData Json?

  store   Store  @relation(fields: [storeId], references: [id])
  storeId String

  paymentMethods Json?

  createdAt DateTime @default(now())

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
}

model OrderItem {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  modifiers Json
  cost      Float   @default(0)
  fulfilled Int     @default(0)
  quantity  Int

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  productId String
}

model OrderFee {
  id String @id @default(cuid())

  name String

  fixed      Float @default(0)
  percentage Float @default(0)

  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}
